generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "postgresql"
//   url = env("DATABASE_PRISMA_URL") // uses connection pooling
//   directUrl = env("DATABASE_URL_NON_POOLING") // uses a direct connection
// }

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?

  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  consumerTasks Task[] @relation("ConsumerTasks")
  taskerTasks   Task[] @relation("TaskerTasks")
}

enum UserRole {
  ADMIN
  USER
  TASKER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model TaskImage {
  id String @id @default(cuid())
  name String
  taskId String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Task Task @relation(fields: [taskId], references: [id])
}

enum TaskStatus {
  SUBMITTING
  POSTED
  FAILED
  ACCPTED
  PAID
  COMPLETED
  RATED
}

model Task {
  id String @id @default(cuid())
  description String
  type String

  consumerId String
  taskerId String?

  images TaskImage[]

  status TaskStatus @default(SUBMITTING)

  Consumer User @relation(name: "ConsumerTasks", fields: [consumerId], references: [id])
  Tasker User? @relation(name: "TaskerTasks", fields: [taskerId], references: [id])
}